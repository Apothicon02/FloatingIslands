plugins {
    id "application"
    id "maven-publish"
}

repositories {
    ivy {
        name "Cosmic Reach"
        url "https://github.com/CRModders/CosmicArchive/raw/main/"
        patternLayout {
            artifact "/Cosmic Reach-[revision].jar"
        }
        // This is required in Gradle 6.0+ as metadata file (ivy.xml) is mandatory
        metadataSources {
            artifact()
        }

        content {
            includeGroup "finalforeach"
        }
    }

    maven {
        name "JitPack"
        url "https://jitpack.io"
    }
    maven {
        name "Quilt"
        url "https://maven.quiltmc.org/repository/release"
    }
    maven {
        name "Fabric"
        url "https://maven.fabricmc.net/"
    }
    maven {
        name "Sponge"
        url "https://repo.spongepowered.org/maven/"
    }
    maven {
        name "CRM"
        url 'https://maven.crmodders.dev/releases/'
    }

    mavenCentral()
}


configurations {
    cosmicreach // Config to provide the Cosmic Reach project
    compileOnly.extendsFrom(cosmicreach) // Allows cosmic reach to be used in the codebase

    internal { // Allows to include something without it being in the maven (recommended to be used when including mods)
        visible = false
        canBeConsumed = false
        canBeResolved = false
    }
    compileClasspath.extendsFrom(internal)
    runtimeClasspath.extendsFrom(internal)
    testCompileClasspath.extendsFrom(internal)
    testRuntimeClasspath.extendsFrom(internal)
}


dependencies {
    // Cosmic Reach jar
    cosmicreach "finalforeach:cosmicreach:${cosmic_reach_version}"

    // Cosmic Quilt
    internal "org.codeberg.CRModders:cosmic-quilt:${cosmic_quilt_version}"

    internal "dev.crmodders:fluxapi:0.5.8r3"

    // FluxAPI
    //  If you don't want FluxAPI included in your project, remove this and the reference in the `gradle.properties`
//    internal "com.github.CRModders:FluxAPI:${fluxapi_version}"
}

processResources {
    def resourceTargets = [ // Locations of where to inject the properties
            "quilt.mod.json"
    ]

    // Left item is the name in the target, right is the varuable name
    def replaceProperties = [
            "mod_version"     : project.version,
            "mod_group"       : project.group,
            "mod_name"        : project.name,
            "mod_id"          : id,
    ]


    inputs.properties replaceProperties
    replaceProperties.put "project", project
    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}


application {
    // As Quilt is our loader, use its main class at:
    mainClass = "org.quiltmc.loader.impl.launch.knot.KnotClient"
}


applicationDefaultJvmArgs = [
        "-Dloader.development=true", // Allows stuff to be found through the classpath
        "-Dloader.gameJarPath=" + configurations.cosmicreach.asPath, // Defines path to Cosmic Reach
]

run {
    // To run this project in the game, depend on the creation of jar task
    dependsOn "jar"

    // Change the run directory
    File runningDir = new File("run/")
    if (!runningDir.exists())
        runningDir.mkdirs()
    tasks.run.workingDir = runningDir
}



java {
	withSourcesJar()
	// withJavadocJar() // If docs are included with the project, this line can be un-commented

    // Sets the Java version
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = id

		    from components.java
        }
    }

    repositories {

    }
}
